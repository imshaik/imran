#!/usr/bin/env groovy

import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL

@Library('pipeline-groovy')
import com.imran.jenkins.GitPipelineSteps
import com.imran.jenkins.DockerPipelineSteps

try {
    //agent { label 'docker' } we can use this as well
    node('Docker') 
    {
        //branch name from Jenkins environment variables
            echo "Branch selected is: ${env.BRANCH_NAME}" 
            echo "Build number is: ${env.BUILD_NUMBER}"
		
		def git	           = new GitPipelineSteps(steps);
	        def docker	   = new DockerPipelineSteps(steps);
		
		def reponame       = "imran"
		def dockerreponame = "httpd"
		def githuburl      = "https://github.com/imshaik/${reponame}.git"
		def dockerurl      = "https://hub.docker.com/r/shaikimranashrafi/${dockerreponame}"
		def buildlabel     = "${env.BRANCH_NAME}-B${env.BUILD_NUMBER}"
        
        stage('Clean workspace')
        {
        /*Cleans the workspace
        */
            deleteDir()
        }
        
        stage('Clone repository') 
        {
           // git branch: "${env.BRANCH_NAME}", credentialsId: 'Github', url: "https://github.com/imshaik/${reponame}.git"
		
		git.checkout(githuburl, env.BRANCH_NAME);
		gitHead = git.commit();
	}
           
        stage('Check if dockerfile is exist or not')
        {
            fileExists 'docker/Dockerfile'
	}	
        stage ('Build Docker image and push to docker Hub')
        {
            dir('docker') {
		
		def dockerimage = docker.build("shaikimranashrafi/${dockerreponame}:${buildlabel}").push()
                /*def dockerimage = docker.build("shaikimranashrafi/${dockerreponame}:${buildlabel}").push()
                Let's tag and push the newly built image. Will tag using the image name provided
                  dockerimage.push()
                 We can also push the image with passing tag name
                dockerimage.push('latest') */

			}
	}

	stage ('Run the test on dockerfile')
	{
		sh("bundle exec rake")
	}

	stage('Remove local images & containers') 
	{
		// remove docker images locally
		echo "Removing the image shaikimranashrafi/${dockerreponame}:${buildlabel}"
		sh("docker rmi -f shaikimranashrafi/${dockerreponame}:${buildlabel}")
		
		/*remove docker images which doesnot have a name assigned
		docker.RemoveImage();
		
		/*remove docker containers the one rakefile created
		docker.RemoveContainer();

		/*remove docker images which doesnot have a name assigned	
		sh("docker rmi -f \${docker images | grep '<none>' | tr -s ' ' | cut -d ' ' -f 3}")*/

		/* remove container the one rakefile created
		sh("docker ps -a -q | xargs -n 1 -I {} sudo docker rm -f {}")*/
	}
        
        stage ('Archive the .txt artifacts')
        {
	    archiveArtifacts artifacts: 'docker/*.yml', fingerprint: true
	}
   }
}   
 
catch (exc) 
{
    echo "Caught: ${exc}"
    
    String recipient = 'shaik.imran@lowes.com'

    mail subject: "${env.JOB_NAME} (${env.BUILD_NUMBER}) failed",
            body: "It appears that ${env.BUILD_URL} is failing, somebody should do something about that",
              to: recipient,
         replyTo: recipient,
            from: 'noreply@ci.jenkins.io'

    /* Rethrow to fail the Pipeline properly */
    throw exc
}
